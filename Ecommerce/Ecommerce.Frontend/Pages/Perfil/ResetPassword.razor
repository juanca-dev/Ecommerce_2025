@page "/resetPassword"

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mt-5">
    <MudPaper Elevation="25" Class="pa-6">
        <MudText Typo="Typo.subtitle1" Class="mb-4">Restablecer Contraseña</MudText>

        <EditForm Model="@model" OnValidSubmit="ResetPasswordAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />


            <MudItem xs="12">
                <MudTextField @bind-Value="model.Email" Label="Correo"
                              Type="InputType.Email" Required="true"
                              For="@(() => model.Email)" Variant="Variant.Outlined"
                              FullWidth="true" Margin="Margin.Dense" />
            </MudItem>

            <!-- Nueva Contraseña -->
            <MudItem xs="12">
                <MudTextField @bind-Value="model.NewPassword" Label="Nueva Contraseña"
                              InputType="@PasswordInput" Required="true"
                              For="@(() => model.NewPassword)" Variant="Variant.Outlined"
                              FullWidth="true" Margin="Margin.Dense" HelperText="Por favor, ingresa una contraseña segura."
                              Class="mt-4" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                              OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
            </MudItem>

            <!-- Confirmar Nueva Contraseña -->
            <MudItem xs="12">
                <MudTextField @bind-Value="model.ConfirmNewPassword" Label="Confirmar Nueva Contraseña"
                              InputType="@PasswordInput" Required="true"
                              For="@(() => model.ConfirmNewPassword)" Variant="Variant.Outlined"
                              FullWidth="true" Margin="Margin.Dense" HelperText="Por favor, ingresa una contraseña segura."
                              Class="mt-4" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                              OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
            </MudItem>

            <!-- Botón Cambiar Contraseña -->
            <MudItem xs="12" Class="mt-4">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                           FullWidth="true">Restablecer Contraseña</MudButton>
            </MudItem>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private ResetPasswordDTO model = new();

    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private HttpClient HttpClient { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    public string NewPassword { get; set; } = string.Empty;
    public string ConfirmNewPassword { get; set; } = string.Empty;
    private bool isShow;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override void OnInitialized()
    {
        NewPassword = model.NewPassword;
        ConfirmNewPassword = model.ConfirmNewPassword;
    }

    private void ButtonTestclick()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task ResetPasswordAsync()
    {
        if (model.NewPassword != model.ConfirmNewPassword)
        {
            Snackbar.Add("Las nuevas contraseñas no coinciden.", Severity.Error);
            return;
        }

        var url = "api/Usuarios/ResetPassword";
        var response = await HttpClient.PostAsJsonAsync(url, model);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Contraseña restablecida exitosamente.", Severity.Success);
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"Error: {errorMessage}", Severity.Error);
        }
    }
}

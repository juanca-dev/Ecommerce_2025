<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.subtitle2" Class="text-center mb-6">Editar un producto</MudText>

        <MudForm @ref="form" Model="@producto">
            <MudTextField @bind-Value="producto.Nombre" Label="Nombre" Variant="Variant.Outlined"
                          FullWidth="true" Margin="Margin.Dense" Required="true"
                          HelperText="Por favor, ingresa el nombre de producto." />

            <MudTextField @bind-Value="producto.Descripcion" Label="Descripcion" Variant="Variant.Outlined"
                          FullWidth="true" Margin="Margin.Dense" Required="true"
                          HelperText="Por favor, ingresa el nombre de producto." Lines="4" />

            <MudNumericField @bind-Value="producto.Precio" Label="Precio" Variant="Variant.Outlined" Step=".2M" />

            <MudNumericField @bind-Value="producto.Stock" Label="Stock" Variant="Variant.Text" Min="0" />

            <MudSelect T="int" @bind-Value="producto.CategoriaId" Label="Seleccione una categoría" Required="true" Class="mb-2"
                       ToStringFunc="@(id => categorias.FirstOrDefault(c => c.Id == id)?.Nombre ?? string.Empty)">
                @foreach (var item in categorias)
                {
                    <MudSelectItem Value="@item.Id">@item.Nombre</MudSelectItem>
                }
            </MudSelect>

            <MudFileUpload T="IBrowserFile" FilesChanged="SubirImagen">
                <ActivatorContent>
                    <MudStack Direction="Direction.Horizontal" Spacing="2" AlignItems="AlignItems.Center">
                        <MudIconButton Color="Color.Info" Icon="@Icons.Material.Filled.PhotoCamera" />
                        <MudText Typo="Typo.body1">Seleccionar foto</MudText>
                    </MudStack>
                </ActivatorContent>
            </MudFileUpload>

            @if (!string.IsNullOrEmpty(imageUrl))
            {
                <MudImage Src="@imageUrl" Height="200" Width="200" Class="border-radius=200" />
            }

        </MudForm>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-6 w-100"
                   OnClick="Guardar">Guardar</MudButton>
    </DialogContent>
</MudDialog>

@code {
    private Producto producto = new Producto();
    [Parameter] public int ProductoId { get; set; }
    private List<Categoria> categorias = new();
    private string imageUrl = null!;
    private MudForm form = null!;

    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {

        var url = "api/productos";
        producto = await Repository.GetByIdAsync<Producto>(url, ProductoId);

        var url2 = "api/categorias";
        categorias = await Repository.GetAsync<List<Categoria>>(url2);

        if (producto == null)
        {
            Snackbar.Add("El producto no existe.", Severity.Error);
            NavigationManager.NavigateTo("/productos");
        }

    }

    private async Task SubirImagen(IBrowserFile file)
    {
        imageUrl = await UploadFiles.UploadImagesAsync(file);
        producto.URLFoto = imageUrl;
    }

    private async Task Guardar()
    {
        if (string.IsNullOrWhiteSpace(producto.Nombre))
        {
            Snackbar.Add("Por favor, completa todos los campos obligatorios.", Severity.Error);
            return;
        }
        try
        {
            await form.Validate();
            if (form.IsValid)
            {
                producto.Categoria = categorias.FirstOrDefault(c => c.Id == producto.CategoriaId);
                var url = $"api/productos/{ProductoId}";
                var response = await Repository.PutAsync(url, producto);
                if (response != null)
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    NavigationManager.NavigateTo("/productos");
                }
                else
                {
                    Snackbar.Add("Error al editar el producto.", Severity.Error);
                }
            }           
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error inesperado: {ex.Message}", Severity.Error);
        }
    }
}

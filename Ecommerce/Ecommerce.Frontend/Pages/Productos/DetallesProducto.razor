<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h4" Class="text-center mb-6">@producto.Nombre</MudText>
        <MudGrid>
            <MudItem xs="12" sm="6">
                <img src="@producto.URLFoto" style="width: 100%; height: auto; object-fit: cover;" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudText Typo="Typo.body1">@producto.Descripcion</MudText>
                <MudText Typo="Typo.body2" Color="Color.Info">Precio:</MudText><MudText Typo="Typo.body2">L.@producto.Precio</MudText>
                <MudText Typo="Typo.body2" Color="Color.Info">Stock:</MudText><MudText Typo="Typo.body2">@producto.Stock</MudText>
                <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Calificación: @producto.Calificacion.ToString("0.0")</MudText>
            </MudItem>
        </MudGrid>

        <MudDivider Class="my-4" />

        <MudText Typo="Typo.h6">Comentarios</MudText>
        @if (Comentarios?.Any() == true)
        {
            <MudList T="string" Dense="true">
                @foreach (var comentario in Comentarios)
                {
                    <MudListItem>
                        <MudAvatar>
                            <MudImage Src="@comentario.Usuario!.URLFoto"></MudImage>
                        </MudAvatar>
                        <MudText Typo="Typo.body2" Color="Color.Info">@comentario.Usuario!.Nombre</MudText>
                        <MudText Typo="Typo.caption">@comentario.Texto</MudText>
                    </MudListItem>
                }
            </MudList>
        }
        else
        {
            <MudText Typo="Typo.body2" Color="Color.Transparent">No hay comentarios aún.</MudText>
        }

        <MudTextField @bind-Value="nuevoComentario" Label="Nuevo comentario" Variant="Variant.Filled" Class="mt-4" />
        <MudButton Color="Color.Secondary" OnClick="GuardarComentario" Disabled="@string.IsNullOrWhiteSpace(nuevoComentario)">
            Enviar comentario
        </MudButton>
    </DialogContent>
    <DialogActions>
        <MudGrid Class="w-100">
            <MudItem xs="6" Class="d-flex justify-start">
                <MudButton OnClick="() => AgregarAlCarrito()" Color="Color.Success">
                    Agregar al carrito
                </MudButton>
            </MudItem>
            <MudItem xs="6" Class="d-flex justify-end align-center">
                <MudRating T="int" @bind-SelectedValue="_valorSeleccionado" MaxValue="5" />
                <MudButton OnClick="() => GuardarValoracion()" Color="Color.Primary" Class="ms-2">
                    Calificar
                </MudButton>
            </MudItem>
        </MudGrid>
    </DialogActions>
</MudDialog>


@code {
    [Parameter] public int ProductoId { get; set; }
    private Producto producto = new Producto();
    private Valoracion valoracion = new Valoracion();
    private Usuario usuario = new();
    private string? userName { get; set; }
    private int _valorSeleccionado = 3;
    private List<Comentario> Comentarios = new();
    private Comentario comentario = new Comentario();
    private string nuevoComentario = string.Empty;
    private Carrito carrito = new Carrito();


    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IDialogService DialogService { get; set; } = null!;
    [Inject] private AuthService AuthService { get; set; } = null!;
    [Inject] private HttpClient HttpClient { get; set; } = null!;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await CargarProducto();
        userName = await AuthService.GetUserNameAsync();
        if (!string.IsNullOrEmpty(userName))
        {
            await ObtenerUsuarioAsync();
        }
        await ObtenerComentarios();
    }

    private async Task ObtenerUsuarioAsync()
    {
        var response = await HttpClient.GetAsync($"api/Usuarios/GetUser?email={userName}");
        if (response.IsSuccessStatusCode)
        {
            var userResponse = await response.Content.ReadFromJsonAsync<Usuario>();
            if (userResponse != null)
            {
                usuario = userResponse;
            }
        }
    }

    private async Task CargarProducto()
    {
        var url = "api/productos";
        producto = await Repository.GetByIdAsync<Producto>(url, ProductoId);
        if (producto == null)
        {
            Snackbar.Add("No se encontró el producto", Severity.Error);
            MudDialog.Cancel();
        }
    }

    private async Task ObtenerComentarios()
    {
        var url = $"api/comentarios/{ProductoId}";
        Comentarios = await Repository.GetAsync<List<Comentario>>(url);
        if (Comentarios == null)
        {
            Snackbar.Add("No se encontraron comentarios", Severity.Error);
            MudDialog.Cancel();
        }
    }

    private async Task GuardarValoracion()
    {
        var url = "api/valoraciones";
        valoracion.ProductoId = producto.Id;
        valoracion.UsuarioId = usuario.Id;
        valoracion.Puntuacion = _valorSeleccionado;
        var result = await Repository.PostAsync(url, valoracion);
        if (result == null)
        {
            Snackbar.Add("Error al guardar la valoración", Severity.Error);
            return;
        }

        Snackbar.Add("Valoración guardada", Severity.Success);
        MudDialog.Cancel();
    }

    private async Task GuardarComentario()
    {
        var url = "api/comentarios";
        comentario.ProductoId = producto.Id;
        comentario.UsuarioId = usuario.Id;
        comentario.Texto = nuevoComentario;
        var result = await Repository.PostAsync(url, comentario);
        if (result == null)
        {
            Snackbar.Add("Error al guardar el comentario", Severity.Error);
            return;
        }

        Snackbar.Add("Comentario guardado", Severity.Success);
        MudDialog.Cancel();
    }

    private async Task AgregarAlCarrito()
    {
        var url = "api/carritos";
        carrito.ProductoId = producto.Id;
        carrito.UsuarioId = usuario.Id;
        carrito.Cantidad = 1;
        var result = await Repository.PostAsync(url, carrito);
        if (result == null)
        {
            Snackbar.Add("Error al agregar el producto al carrito", Severity.Error);
            return;
        }
        Snackbar.Add("Producto agregado al carrito", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
        StateHasChanged();
    }
}